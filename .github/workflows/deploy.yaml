name: Deploy to EC2

on:
  push:
    branches: [ master ]

jobs:
  get-server-dns:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform
    outputs:
      server_dns: ${{ steps.define_variable.outputs.server_dns }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.TERRAFORM_USER_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TERRAFORM_USER_SECRET_ACCESS_KEY }}
      AWS_REGION: "us-east-1"
      AWS_EC2_METADATA_DISABLED: "true"

    steps:
      - name: Bring code to container
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.5

      - name: Get current server DNS and export to a variable
        id: define_variable
        run: |
          terraform init

          terraform apply -refresh-only -auto-approve
          echo "server_dns=$(terraform output -raw server_dns)" >> $GITHUB_OUTPUT


  cleanup:
    runs-on: ubuntu-latest
    needs: get-server-dns
    steps:
      - name: Cleanup old release
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.get-server-dns.outputs.server_dns }}
          username: admin
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo systemctl stop neon-bot

            cd /home/admin/neon-bot

            rm -rf commands db decorators factories node_modules utils || true
            rm .env client.js drizzle-dev.config.js drizzle-prod.config.js main.js package-lock.json package.json || true


  deploy:
    runs-on: ubuntu-latest
    needs: [get-server-dns, cleanup]
    steps:
      - name: Bring code to container
        uses: actions/checkout@v4


      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20


      - name: Build Typescript project
        run: |
          npm ci
          npx tsc


      - name: Copy build files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ needs.get-server-dns.outputs.server_dns }}
          username: admin
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "dist/"
          target: "/home/admin/neon-bot"
          strip_components: 1


      - name: Copy dependencies to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ needs.get-server-dns.outputs.server_dns }}
          username: admin
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "package.json,package-lock.json"
          target: "/home/admin/neon-bot"


      - name: Add environment variables and start the bot
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ needs.get-server-dns.outputs.server_dns }}
          username: admin
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd ~/neon-bot

            echo "
            DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}

            DB_FILE_NAME=file:db.sqlite3

            ENV=prod

            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            BUCKET_NAME=${{ secrets.BUCKET_NAME }}
            " > .env

            npm install --omit=dev

            npx drizzle-kit generate --config=./drizzle-prod.config.js
            npx drizzle-kit migrate --config=./drizzle-prod.config.js

            sudo systemctl start neon-bot
